// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/LLVMContext.h>
#include <llvm/Module.h>
#include <llvm/DerivedTypes.h>
#include <llvm/Constants.h>
#include <llvm/GlobalVariable.h>
#include <llvm/Function.h>
#include <llvm/CallingConv.h>
#include <llvm/BasicBlock.h>
#include <llvm/Instructions.h>
#include <llvm/InlineAsm.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("struct.ll", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64");
 mod->setTargetTriple("x86_64-apple-macosx10.7.4");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_0_args.push_back(Type::getDoubleTy(mod->getContext()));
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 PointerType* PointerTy_2 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);
 
 StructType *StructTy_struct_Foo = mod->getTypeByName("struct.Foo");
 if (!StructTy_struct_Foo) {
 StructTy_struct_Foo = StructType::create(mod->getContext(), "struct.Foo");
 }
 std::vector<Type*>StructTy_struct_Foo_fields;
 StructTy_struct_Foo_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_Foo_fields.push_back(Type::getDoubleTy(mod->getContext()));
 ArrayType* ArrayTy_4 = ArrayType::get(Type::getDoubleTy(mod->getContext()), 10);
 
 StructTy_struct_Foo_fields.push_back(ArrayTy_4);
 if (StructTy_struct_Foo->isOpaque()) {
 StructTy_struct_Foo->setBody(StructTy_struct_Foo_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_3 = PointerType::get(StructTy_struct_Foo, 0);
 
 PointerType* PointerTy_5 = PointerType::get(ArrayTy_4, 0);
 
 
 // Function Declarations
 
 Function* func_foo = mod->getFunction("foo");
 if (!func_foo) {
 func_foo = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"foo", mod); 
 func_foo->setCallingConv(CallingConv::C);
 }
 AttrListPtr func_foo_PAL;
 {
  SmallVector<AttributeWithIndex, 4> Attrs;
  AttributeWithIndex PAWI;
  PAWI.Index = 4294967295U;
 {
    AttrBuilder B;
    B.addAttribute(Attributes::NoUnwind);
    B.addAttribute(Attributes::StackProtect);
    PAWI.Attrs = Attributes::get(mod->getContext(), B);
 }
  Attrs.push_back(PAWI);
  func_foo_PAL = AttrListPtr::get(mod->getContext(), Attrs);
  
 }
 func_foo->setAttributes(func_foo_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_6 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_7 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 ConstantInt* const_int32_8 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
 ConstantInt* const_int64_9 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: foo (func_foo)
 {
  Function::arg_iterator args = func_foo->arg_begin();
  Value* int32_i = args++;
  int32_i->setName("i");
  Value* double_d = args++;
  double_d->setName("d");
  
  BasicBlock* label_10 = BasicBlock::Create(mod->getContext(), "",func_foo,0);
  
  // Block  (label_10)
  AllocaInst* ptr_11 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_10);
  ptr_11->setAlignment(4);
  AllocaInst* ptr_12 = new AllocaInst(Type::getDoubleTy(mod->getContext()), "", label_10);
  ptr_12->setAlignment(8);
  AllocaInst* ptr_f = new AllocaInst(StructTy_struct_Foo, "f", label_10);
  ptr_f->setAlignment(8);
  StoreInst* void_13 = new StoreInst(int32_i, ptr_11, false, label_10);
  void_13->setAlignment(4);
  StoreInst* void_14 = new StoreInst(double_d, ptr_12, false, label_10);
  void_14->setAlignment(8);
  LoadInst* int32_15 = new LoadInst(ptr_11, "", false, label_10);
  int32_15->setAlignment(4);
  std::vector<Value*> ptr_16_indices;
  ptr_16_indices.push_back(const_int32_7);
  ptr_16_indices.push_back(const_int32_7);
  Instruction* ptr_16 = GetElementPtrInst::Create(ptr_f, ptr_16_indices, "", label_10);
  StoreInst* void_17 = new StoreInst(int32_15, ptr_16, false, label_10);
  void_17->setAlignment(4);
  LoadInst* double_18 = new LoadInst(ptr_12, "", false, label_10);
  double_18->setAlignment(8);
  std::vector<Value*> ptr_19_indices;
  ptr_19_indices.push_back(const_int32_7);
  ptr_19_indices.push_back(const_int32_6);
  Instruction* ptr_19 = GetElementPtrInst::Create(ptr_f, ptr_19_indices, "", label_10);
  StoreInst* void_20 = new StoreInst(double_18, ptr_19, false, label_10);
  void_20->setAlignment(8);
  LoadInst* double_21 = new LoadInst(ptr_12, "", false, label_10);
  double_21->setAlignment(8);
  std::vector<Value*> ptr_22_indices;
  ptr_22_indices.push_back(const_int32_7);
  ptr_22_indices.push_back(const_int32_8);
  Instruction* ptr_22 = GetElementPtrInst::Create(ptr_f, ptr_22_indices, "", label_10);
  std::vector<Value*> ptr_23_indices;
  ptr_23_indices.push_back(const_int32_7);
  ptr_23_indices.push_back(const_int64_9);
  Instruction* ptr_23 = GetElementPtrInst::Create(ptr_22, ptr_23_indices, "", label_10);
  StoreInst* void_24 = new StoreInst(double_21, ptr_23, false, label_10);
  void_24->setAlignment(8);
  ReturnInst::Create(mod->getContext(), const_int32_7, label_10);
  
 }
 
 return mod;
}
