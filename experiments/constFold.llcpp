// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/LLVMContext.h>
#include <llvm/Module.h>
#include <llvm/DerivedTypes.h>
#include <llvm/Constants.h>
#include <llvm/GlobalVariable.h>
#include <llvm/Function.h>
#include <llvm/CallingConv.h>
#include <llvm/BasicBlock.h>
#include <llvm/Instructions.h>
#include <llvm/InlineAsm.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("constFold.bc", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128");
 mod->setTargetTriple("x86_64-apple-darwin10.4");
 
 // Type Definitions
 PointerType* PointerTy_0 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);
 
 std::vector<const Type*>FuncTy_1_args;
 FuncTy_1_args.push_back(PointerTy_0);
 FuncTy_1_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_1_args.push_back(PointerTy_0);
 FunctionType* FuncTy_1 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_1_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_2 = PointerType::get(PointerTy_0, 0);
 
 PointerType* PointerTy_3 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 std::vector<const Type*>FuncTy_5_args;
 FuncTy_5_args.push_back(Type::getDoubleTy(mod->getContext()));
 FunctionType* FuncTy_5 = FunctionType::get(
  /*Result=*/Type::getDoubleTy(mod->getContext()),
  /*Params=*/FuncTy_5_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_4 = PointerType::get(FuncTy_5, 0);
 
 
 // Function Declarations
 
 Function* func_foo = Function::Create(
  /*Type=*/FuncTy_1,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"foo", mod); 
 func_foo->setCallingConv(CallingConv::C);
 AttrListPtr func_foo_PAL;
 {
  SmallVector<AttributeWithIndex, 4> Attrs;
  AttributeWithIndex PAWI;
  PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind | Attribute::StackProtect;
  Attrs.push_back(PAWI);
  func_foo_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
  
 }
 func_foo->setAttributes(func_foo_PAL);
 
 Function* func_sin = Function::Create(
  /*Type=*/FuncTy_5,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"sin", mod); // (external, no body)
 func_sin->setCallingConv(CallingConv::C);
 AttrListPtr func_sin_PAL;
 {
  SmallVector<AttributeWithIndex, 4> Attrs;
  AttributeWithIndex PAWI;
  PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind | Attribute::ReadOnly;
  Attrs.push_back(PAWI);
  func_sin_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
  
 }
 func_sin->setAttributes(func_sin_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_double_pi = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/Type::getDoubleTy(mod->getContext()),
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"pi");
 
 // Constant Definitions
 ConstantFP* const_double_6 = ConstantFP::get(mod->getContext(), APFloat(3.141450e+00));
 ConstantInt* const_int32_7 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_8 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 ConstantFP* const_double_9 = ConstantFP::get(mod->getContext(), APFloat(2.000000e+00));
 
 // Global Variable Definitions
 gvar_double_pi->setInitializer(const_double_6);
 
 // Function Definitions
 
 // Function: foo (func_foo)
 {
  Function::arg_iterator args = func_foo->arg_begin();
  Value* ptr_x = args++;
  ptr_x->setName("x");
  Value* int32_len = args++;
  int32_len->setName("len");
  Value* ptr_ans = args++;
  ptr_ans->setName("ans");
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_foo,0);
  BasicBlock* label_bb = BasicBlock::Create(mod->getContext(), "bb",func_foo,0);
  BasicBlock* label_bb1 = BasicBlock::Create(mod->getContext(), "bb1",func_foo,0);
  BasicBlock* label_bb2 = BasicBlock::Create(mod->getContext(), "bb2",func_foo,0);
  BasicBlock* label_return = BasicBlock::Create(mod->getContext(), "return",func_foo,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_x_addr = new AllocaInst(PointerTy_0, "x_addr", label_entry);
  AllocaInst* ptr_len_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "len_addr", label_entry);
  AllocaInst* ptr_ans_addr = new AllocaInst(PointerTy_0, "ans_addr", label_entry);
  AllocaInst* ptr_i = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i", label_entry);
  CastInst* int32_alloca_point = new BitCastInst(const_int32_8, IntegerType::get(mod->getContext(), 32), "alloca point", label_entry);
   new StoreInst(ptr_x, ptr_x_addr, false, label_entry);
   new StoreInst(int32_len, ptr_len_addr, false, label_entry);
   new StoreInst(ptr_ans, ptr_ans_addr, false, label_entry);
   new StoreInst(const_int32_8, ptr_i, false, label_entry);
  BranchInst::Create(label_bb1, label_entry);
  
  // Block bb (label_bb)
  LoadInst* double_15 = new LoadInst(gvar_double_pi, "", false, label_bb);
  BinaryOperator* double_16 = BinaryOperator::Create(Instruction::FMul, double_15, const_double_9, "", label_bb);
  LoadInst* ptr_17 = new LoadInst(ptr_x_addr, "", false, label_bb);
  LoadInst* int32_18 = new LoadInst(ptr_i, "", false, label_bb);
  CastInst* int64_19 = new SExtInst(int32_18, IntegerType::get(mod->getContext(), 64), "", label_bb);
  GetElementPtrInst* ptr_20 = GetElementPtrInst::Create(ptr_17, int64_19, "", label_bb);
  LoadInst* double_21 = new LoadInst(ptr_20, "", false, label_bb);
  BinaryOperator* double_22 = BinaryOperator::Create(Instruction::FMul, double_16, double_21, "", label_bb);
  CallInst* double_23 = CallInst::Create(func_sin, double_22, "", label_bb);
  double_23->setCallingConv(CallingConv::C);
  double_23->setTailCall(false);
  AttrListPtr double_23_PAL;
  {
   SmallVector<AttributeWithIndex, 4> Attrs;
   AttributeWithIndex PAWI;
   PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind | Attribute::ReadOnly;
   Attrs.push_back(PAWI);
   double_23_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
   
  }
  double_23->setAttributes(double_23_PAL);
  
  LoadInst* ptr_24 = new LoadInst(ptr_ans_addr, "", false, label_bb);
  LoadInst* int32_25 = new LoadInst(ptr_i, "", false, label_bb);
  CastInst* int64_26 = new SExtInst(int32_25, IntegerType::get(mod->getContext(), 64), "", label_bb);
  GetElementPtrInst* ptr_27 = GetElementPtrInst::Create(ptr_24, int64_26, "", label_bb);
   new StoreInst(double_23, ptr_27, false, label_bb);
  LoadInst* int32_29 = new LoadInst(ptr_i, "", false, label_bb);
  BinaryOperator* int32_30 = BinaryOperator::Create(Instruction::Add, int32_29, const_int32_7, "", label_bb);
   new StoreInst(int32_30, ptr_i, false, label_bb);
  BranchInst::Create(label_bb1, label_bb);
  
  // Block bb1 (label_bb1)
  LoadInst* int32_33 = new LoadInst(ptr_i, "", false, label_bb1);
  LoadInst* int32_34 = new LoadInst(ptr_len_addr, "", false, label_bb1);
  ICmpInst* int1_35 = new ICmpInst(*label_bb1, ICmpInst::ICMP_SLT, int32_33, int32_34, "");
  BranchInst::Create(label_bb, label_bb2, int1_35, label_bb1);
  
  // Block bb2 (label_bb2)
  BranchInst::Create(label_return, label_bb2);
  
  // Block return (label_return)
  ReturnInst::Create(mod->getContext(), label_return);
  
 }
 
 return mod;
}
